name: CI

on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    environment: production
    env:
      CADDY_MERCURE_JWT_SECRET: ${{ secrets.CADDY_MERCURE_JWT_SECRET }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      APP_SECRET: ${{ secrets.APP_SECRET }}
      APP_ENV: ${{ vars.APP_ENV }}
      DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@database:5432/${{ secrets.POSTGRES_DB }}?serverVersion=16&charset=utf8"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build Docker images
        uses: docker/bake-action@v6
        with:
          pull: true
          load: true
          files: |
            compose.yaml
            compose.prod.yaml
          set: |
            *.cache-from=type=gha,scope=${{github.ref}}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{github.ref}},mode=max
      -
        name: Start services
        run: |
          docker compose -f compose.yaml -f compose.prod.yaml up --wait --no-build
      -
        name: Check HTTP reachability
        if: false
        run: curl -v --fail-with-body http://localhost
      -
        name: Check HTTPS reachability
        if: true # Remove this line when the homepage will be configured, or change the path to check
        run: curl -vk --fail-with-body https://localhost
      -
        name: Check Mercure reachability
        run: curl -vkI --fail-with-body https://localhost/.well-known/mercure?topic=test
      -
        name: Create test database
        if: true # Remove this line if Doctrine ORM is installed
        run: docker compose exec -T php bin/console -e test doctrine:database:create
      -
        name: Run migrations
        if: true # Remove this line if Doctrine Migrations is installed
        run: docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      -
        name: Run PHPUnit
        if: false # Remove this line if PHPUnit is installed
        run: docker compose exec -T php bin/phpunit
      -
        name: Doctrine Schema Validator
        if: true # Remove this line if Doctrine ORM is installed
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate
      -
        name: Show container logs on failure
        if: failure()
        run: docker compose logs php
  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    # needs: tests  # S'assurer que les tests passent avant le d√©ploiement
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create deployment script
        run: |
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e
          
          echo "üì¶ D√©finition des variables d‚Äôenvironnement..."
          export CADDY_MERCURE_JWT_SECRET="${CADDY_MERCURE_JWT_SECRET}"
          export APP_SECRET="${APP_SECRET}"
          export POSTGRES_DB="${POSTGRES_DB}"
          export POSTGRES_USER="${POSTGRES_USER}"
          export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
          export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}?serverVersion=16&charset=utf8"
          export APP_ENV=prod
          
          echo "üì¶ V√©rification du dossier /opt/app..."
          if [ ! -d "/opt/app" ]; then
            echo "üõ† Cr√©ation du dossier..."
            sudo mkdir -p /opt/app
            sudo chown -R www-data:www-data /opt/app
            sudo chmod 750 /opt/app
            sudo setfacl -m u:$SSH_USER:rwx /opt/app
            sudo setfacl -d -m u:$SSH_USER:rwx /opt/app
          fi
          
          echo "üì¶ Mise √† jour du code..."
          git config --global --add safe.directory /opt/app
          cd /opt/app
          if [ ! -d ".git" ]; then
            git clone https://github.com/Oipnet/loto.git .
          else
            git pull origin main
          fi
          
          echo "üê≥ Mise √† jour des images Docker..."
          sudo -E docker compose -f compose.yaml -f compose.prod.yaml build
          
          echo "üöÄ Lancement de l‚Äôapplication..."
          sudo -E docker compose -f compose.yaml -f compose.prod.yaml up -d --build
          
          echo "‚úÖ D√©ploiement termin√© avec succ√®s !"
          EOF
          
          chmod +x deploy.sh

      - name: Copy script to VPS
        run: |
          ssh -o "StrictHostKeyChecking=no" -p 2222 $SSH_USER@$SERVER_IP "echo 'SSH OK'"
          scp -o "StrictHostKeyChecking=no" -P 2222 deploy.sh $SSH_USER@$SERVER_IP:/home/forelse/deploy.sh
      
      - name: Execute deployment script on VPS
        run: ssh -p 2222 $SSH_USER@$SERVER_IP 'bash /home/forelse/deploy.sh'
    env:
      CADDY_MERCURE_JWT_SECRET: ${{ secrets.CADDY_MERCURE_JWT_SECRET }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      APP_SECRET: ${{ secrets.APP_SECRET }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_USER: ${{ secrets.SSH_USER }}
